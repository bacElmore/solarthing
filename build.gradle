
buildscript {
    ext {
        junit5Version = '5.7.2' // https://junit.org/junit5/
        junit5PlatformVersion = '1.7.2'

        slf4jVersion = '1.7.32' // http://www.slf4j.org/download.html
        log4jVersion = '2.14.1' // https://logging.apache.org/log4j/2.x/javadoc.html
        // https://github.com/FasterXML/jackson/wiki/Jackson-Releases
        jacksonVersion = '2.13.0' // https://github.com/FasterXML/jackson-databind/releases
        // retrofit is why we need allow-opens. context: https://stackoverflow.com/questions/60915381/retrofit2-maven-project-illegal-reflective-access-warning // https://github.com/square/retrofit/issues/3341
        retrofitVersion = "2.9.0" // https://github.com/square/retrofit/releases
        shadowVersion = '7.1.0' // https://github.com/johnrengelman/shadow/releases // only works on gradle 7
//        ioLibVersion = '2.1.0' // https://github.com/retrodaredevil/io-lib/releases
        ioLibVersion = 'cc13e29d6d'
        okhttpVersion = "4.9.2" // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
        couchdbJavaVersion = 'c109c8ead8'
    }
}


plugins {
    id 'com.diffplug.spotless' version '5.14.0' // https://search.maven.org/search?q=a:spotless-plugin-gradle
}

version "0.0.1-SNAPSHOT"
description = """SolarThing"""
group = "me.retrodaredevil.solarthing"

spotless {
    // More info on ratchet https://github.com/diffplug/spotless/tree/master/plugin-gradle#ratchet
//    ratchetFrom 'origin/master'
    // https://github.com/diffplug/spotless/tree/master/plugin-gradle#eclipse-jdt if you have eclipse xml
    enforceCheck = false // doesn't have to be formatted correctly for ./gradlew build to work
    format 'javaBasic', com.diffplug.gradle.spotless.JavaExtension, {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**'
        }
        toggleOffOn()
        removeUnusedImports()
        endWithNewline()
    }
    format 'javaIndent', com.diffplug.gradle.spotless.JavaExtension, {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**'
        }
        toggleOffOn()
        indentWithTabs()
        toggleOffOn("/*", "*/") // It doesn't like tabs then a space, which are present in Javadocs, so just disable
    }

    format 'javaNewOnly', com.diffplug.gradle.spotless.JavaExtension, {
        ratchetFrom 'origin/master'
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**'
        }
        toggleOffOn()
        trimTrailingWhitespace()
        // https://github.com/diffplug/spotless/issues/649#issuecomment-738199681
//        replaceRegex("No wildcard", "import\\s+[^\\*\\s]+\\*;(\\r\\n|\\r|\\n)", "\$1") // disables wildcard imports if we want
        /*
        Pattern pattern = Pattern.compile("import\\s+[^\\*\\s]+\\*;(\\r\\n|\\r|\\n)", Pattern.UNIX_LINES | Pattern.MULTILINE)
        custom "No wildcard", { original ->
            Matcher matcher = pattern.matcher(original)
            if (matcher.find()) {
                throw new AssertionError("Wildcard imports are not allowed")
            }
            return original
        }
         */

    }
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        google()
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    repositories {
        maven { url "https://jitpack.io" }
        maven { url "https://repo.maven.apache.org/maven2" }
    }
    dependencies {
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit5Version
        testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5Version"
        testImplementation "org.junit.platform:junit-platform-commons:$junit5PlatformVersion"
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: junit5Version
        testImplementation 'com.tngtech.archunit:archunit:0.21.0' // https://github.com/TNG/ArchUnit/releases

        // https://mvnrepository.com/artifact/com.google.code.findbugs/jsr305
        implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
        implementation 'org.jetbrains:annotations:21.0.1' // https://search.maven.org/search?q=g:org.jetbrains%20AND%20a:annotations
    }
    test {
        useJUnitPlatform()
        if(JavaVersion.current() >= JavaVersion.VERSION_1_9) {
            // If we don't have this, we get warnings for something about retrofit2.Platform
            //   - likely solcast action node
            jvmArgs "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED"
        }
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile){
            options.compilerArgs << "-Xlint:deprecation"
        }
    }
    publishing {
        publications {
            mavenJava(MavenPublication) {
                // thanks https://stackoverflow.com/a/68515859/5434860
                groupId = "${group}"
                artifactId = "${project.name}"
                version = "${version}"

                from project.components.java
            }
        }
    }
}
project(":core"){
    apply plugin: 'java'
    dependencies {
        annotationProcessor project(":process-annotations")
    }
}
project(":common"){
    apply plugin: 'java'
    dependencies {
        api project(":core")
        annotationProcessor project(":process-annotations")
    }
}
project(":client"){
    apply plugin: 'java'
    dependencies {
        api project(":core")
        api project(":common")
        api project(":serviceapi")
        api project(":action-node")
        annotationProcessor project(":process-annotations")
    }
}
project(":serviceapi"){
    apply plugin: 'java'
    dependencies {
        api project(":core")
        annotationProcessor project(":process-annotations")
    }
}
project(":graphql"){
    apply plugin: 'java'
    dependencies {
        api project(":core")
        api project(":common")
        api project(":serviceapi")
        annotationProcessor project(":process-annotations")
    }
}

wrapper {
    gradleVersion = '7.2'
    distributionType = Wrapper.DistributionType.ALL
}
